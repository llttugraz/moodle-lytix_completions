{"version":3,"file":"activity_completion.min.js","sources":["../src/activity_completion.js"],"sourcesContent":["import Templates from 'core/templates';\nimport Widget from 'lytix_helper/widget';\nimport {makeLoggingFunction} from 'lytix_logs/logs';\n\nconst widgetId = 'activity-completion';\n\n// This is meant to be rendered by mustache.\nconst view = {\n    entries: [],\n    filters: []\n};\n\n// File is stale.\n// Groups row elements by module (== type of activity); used for filtering.\nconst rowsByModule = {};\n\n// Cache for DOM elements.\nconst elements = {\n    tableContainer: null,\n    tbody: null,\n    entryElements: null\n};\n\nlet log; // Will be the logging function.\n\n/**\n * Sorts the received data, caches it, and reorders the rows of the already rendered table.\n *\n * @param {String} criterium One of the following: open, name, module, done.\n *    Defaults to most recent criterium, defaults to ‘name’ on first call.\n * @param {bool} descending Specifiy if order should be descending or not (→ ascending).\n *    Defaults to most recent order, defaults to true on first call.\n */\n\n// These are used to save sorting criterium and order between calls.\n// Mostly necessary for sorting after filtering.\nlet\n    currentCriterium = 'name',\n    currentlyDescending = true;\n\nconst sortingFunctions = {\n    name: (a, b) => a.name.localeCompare(b.name) * (currentlyDescending ? 1 : -1),\n    module: (a, b) => a.module.localeCompare(b.module) * (currentlyDescending ? 1 : -1),\n    open: (a, b) => currentlyDescending ? a.open < b.open : a.open > b.open,\n    done: (a, b) => currentlyDescending ? a.open > b.open : a.open < b.open\n};\n\nconst sort = (criterium = currentCriterium, descending = currentlyDescending) => {\n\n    currentCriterium = criterium;\n    currentlyDescending = descending;\n\n    const sortedData = Array.from(view.entries).sort(sortingFunctions[criterium]);\n\n    const hiddenElements = [];\n    const length = sortedData.length;\n    for (let i = 0; i < length; ++i) {\n        const row = sortedData[i].element;\n        if (row.hidden) {\n            hiddenElements.push(row);\n        } else {\n            elements.tbody.appendChild(row);\n        }\n    }\n    for (let i = hiddenElements.length - 1; i >= 0; --i) {\n        elements.tbody.appendChild(hiddenElements[i]);\n    }\n};\n\n\nconst\n    hide = element => {\n        elements.tbody.appendChild(element);\n        element.setAttribute('hidden', '');\n    },\n    reveal = element => element.removeAttribute('hidden');\n\n/**\n * Hides or reveals rows of the specified module (== activity type).\n *\n * @function filter\n * @param {String} module A lowercase string (as received by backend).\n * @param {bool} isVisible Specifies if the given activity type shall be visible or hidden.\n */\nconst filter = (module, isVisible) => {\n    const\n        elements = rowsByModule[module],\n        action = isVisible ? reveal : hide;\n    for (let i = elements.length - 1; i >= 0; --i) {\n        action(elements[i]);\n    }\n    if (isVisible) {\n        sort();\n    }\n};\n\n\nexport const init = (userid, contextid, courseid) => {\n\n    const dataPromise = Widget.getData(\n        'lytix_completions_activity_completion_get',\n        {contextid: contextid, courseid: courseid}\n    )\n    .then(data => {\n        const count = data.Name.length;\n        if (count > 0) {\n            data.count = count;\n            return data;\n        }\n        throw new Widget.NoDataError();\n    });\n\n    const stringsPromise = Widget.getStrings({\n        lytix_completions: { // eslint-disable-line camelcase\n            identical: [\n                'forum',\n                'grade',\n                'submission',\n                'resource',\n                'quiz',\n                'video',\n                'bbb',\n                'label',\n                'feedback',\n                'assign',\n            ],\n        },\n    });\n\n    elements.tableContainer = document.getElementById('activity-completion-table');\n    log = makeLoggingFunction(userid, courseid, contextid, 'activity completion');\n\n    Promise.all([stringsPromise, dataPromise])\n    .then(values => {\n        const\n            strings = values[0],\n            data = values[1];\n\n        // This event handler is only a named function because it needs to be removed during its first invocation.\n        const addCsvDownload = function(event) {\n            event.preventDefault();\n\n            // eslint-disable-next-line promise/catch-or-return\n            Templates.render('lytix_completions/activity_completion_csv', view)\n            .then(csv => {\n                const csvData = new Blob([csv], {type: 'text/plain;charset=utf-8'});\n                this.href = window.URL.createObjectURL(csvData);\n                this.target = '_blank';\n                this.download = '<Statistic_>' + new Date().toLocaleDateString() + '.csv';\n\n                this.removeEventListener('click', addCsvDownload);\n                this.click();\n                log('DOWNLOAD', 'CSV');\n\n                return;\n            });\n        };\n\n        const\n            count = data.count,\n            entries = view.entries,\n            hiddenModules = ['label'], // Modules that are hidden by default.\n            hiddenModulesSet = new Set(hiddenModules);\n\n        for (let i = 0; i < count; ++i) {\n            // The terms ‘module’ and ‘type’ both refer to the same thing: They describe the kind of activity (forum, quiz, …).\n            // In this context ‘type’ labels the string meant to be read by users.\n            // ‘module’ is the string that’s being used internally.\n            const\n                module = data.Module[i],\n                type = strings[module],\n                done = data.Done[i],\n                total = done + data.Open[i];\n\n            view.entries.push({\n                type: type,\n                module: module,\n                id: data.Id[i],\n                name: data.Name[i],\n                total: total,\n                donePercentage: done * 100 / total,\n                done: done,\n                open: data.Open[i]\n            });\n            // Populate rowsByModule for filtering.\n            if (!rowsByModule.hasOwnProperty(module)) {\n                rowsByModule[module] = [];\n                view.filters.push({\n                    id: widgetId + '-filter-' + module, // Only needed for <label for='id'>.\n                    module: module,\n                    hidden: hiddenModulesSet.has(module),\n                    label: type\n                });\n            }\n        }\n\n        // Make sure filtering options appear in alphabetical order.\n        view.filters.sort((a, b) => {\n            // TODO: maybe consider locale\n            if (a.label < b.label) {\n                return -1;\n            }\n            if (a.label > b.label) {\n                return 1;\n            }\n            return 0;\n        });\n\n        return Templates.render('lytix_completions/activity_completion', view)\n        .then(html => {\n            elements.tableContainer.innerHTML = html;\n            elements.tbody = document.getElementById('activity-completion-entries');\n\n            // Connect each data entry with its <tr> element.\n            elements.entryElements = elements.tbody.getElementsByTagName('tr');\n            for (let i = entries.length - 1; i >= 0; --i) {\n                const element = entries[i].element = elements.entryElements[i];\n                rowsByModule[entries[i].module].push(element);\n            }\n\n            for (let i = hiddenModules.length - 1; i >= 0; --i) {\n                const module = hiddenModules[i];\n                if (rowsByModule.hasOwnProperty(module)) {\n                    filter(module, false);\n                }\n            }\n\n            elements.tableContainer.removeAttribute('hidden');\n\n            // That <th> is currently used for sorting.\n            let currentlySortedBy = document.querySelector('#activity-completion-head .sorted');\n            document.getElementById('activity-completion-head').addEventListener('click', function(event) {\n                let\n                    th = event.target,\n                    criterium = th.dataset.criterium;\n\n                while (!criterium && th !== this) {\n                    th = th.parentElement;\n                    criterium = th.dataset.criterium;\n                }\n                if (!criterium) {\n                    return;\n                }\n\n                currentlySortedBy?.classList.remove('sorted');\n                currentlySortedBy = th;\n                currentlySortedBy.classList.add('sorted');\n\n                // Determine NEW order.\n                const descending = th.dataset.order != 'descending';\n                th.dataset.order = descending ? 'descending' : 'ascending';\n\n                sort(criterium, descending);\n                log('SORT', descending ? 'DESC' : 'ASC', criterium);\n            });\n\n            document.getElementById('activity-filter').addEventListener('change', event => {\n                filter(event.target.dataset.module, event.target.checked);\n                log('FILTER', 'ON', event.target.dataset.module);\n            });\n\n            document.getElementById('export-table-button').addEventListener('click', addCsvDownload);\n\n            // Sort after activity, to have an explicitly defined sorting order (instead of whatever comes from backend).\n            sort('module', true);\n\n            return;\n        });\n    })\n    .finally(() => {\n        document.getElementById(widgetId).classList.remove('loading');\n    })\n    .catch(error => Widget.handleError(error, widgetId));\n};\n"],"names":["log","widgetId","view","entries","filters","rowsByModule","elements","tableContainer","tbody","entryElements","currentCriterium","currentlyDescending","sortingFunctions","name","a","b","localeCompare","module","open","done","sort","criterium","descending","sortedData","Array","from","hiddenElements","length","i","row","element","hidden","push","appendChild","hide","setAttribute","reveal","removeAttribute","filter","isVisible","action","userid","contextid","courseid","dataPromise","Widget","getData","then","data","count","Name","NoDataError","stringsPromise","getStrings","lytix_completions","identical","document","getElementById","Promise","all","values","strings","addCsvDownload","event","preventDefault","render","csv","csvData","Blob","type","_this","href","window","URL","createObjectURL","target","download","Date","toLocaleDateString","removeEventListener","click","hiddenModules","hiddenModulesSet","Set","Module","Done","total","Open","id","Id","donePercentage","hasOwnProperty","has","label","Templates","html","innerHTML","getElementsByTagName","currentlySortedBy","querySelector","addEventListener","th","dataset","this","parentElement","classList","remove","add","order","checked","finally","catch","error","handleError"],"mappings":"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"}